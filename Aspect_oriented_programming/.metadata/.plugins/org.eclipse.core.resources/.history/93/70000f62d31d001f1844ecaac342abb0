package com.infosys.pojo;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;

// this class is the cross cutting aspect class
@Aspect
public class LoggingAspect {
	@Pointcut("execution(* Customer.*(..))")
	public void point() {
	}
	
	@Before("point()") //this below is also fine and it does not require @Pointcut to be defined
//	@Before("execution(* com.infosys.pojo.Customer.addCustomer(..))")
	public void logBefore(JoinPoint joinPoint) {
		System.out.println("logBefore() is running");
		System.out.println("hijacked: "+joinPoint.getSignature().getName());
	}
	@After("point()") //this below is also fine and it does not require @Pointcut to be defined
	public void logAfter(JoinPoint joinPoint) {
		System.out.println("logAfter() is running");
		System.out.println("hijacked: "+joinPoint.getSignature().getName());
	}
	
	@AfterReturning(pointcut="execution(* com.infosys.pojo.Customer.addCustomerReturnValue(..))",returning = "result")
	public void afterReturn(JoinPoint joinPoint,Object result) {
		System.out.println("logAfterReturning() is running");
		System.out.println("hijacked: "+joinPoint.getSignature().getName());
		System.out.println("Method returned value is "+result);
	}
}
